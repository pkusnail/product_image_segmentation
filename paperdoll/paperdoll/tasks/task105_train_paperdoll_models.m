function task105_train_paperdoll_models
%TASK105_TRAIN_PAPERDOLL_MODELS
  fashionista_file = 'data/fashionista_v0.2.mat';
  trained_calculator_file = 'tmp/task101_feature_calculators.mat';
  descriptor_file = 'tmp/task104_paperdoll_descriptors.mat';
  exemplars_db_file = 'data/paperdoll_exemplars.bdb';
  final_calculator_file = 'data/paperdoll_pipeline.mat';

  samples = load_fashionista_dataset(fashionista_file);
  samples = convert_fashionista_annotation(samples);
  config = create_pipeline(trained_calculator_file, ...
                           descriptor_file, ...
                           exemplars_db_file);
  [config, samples] = feature_calculator.train(config, samples);
  logger('Saving trained models.');
  save(final_calculator_file, 'config');
  %save tmp/task105_training_samples.mat samples; % For debugging purpose.
end

function truths = load_fashionista_dataset(fashionista_file)
%LOAD_FASHIONISTA_DATASET
  logger('Loading Fashionista training data.');
  load(fashionista_file, 'truths', 'test_index');
  truths(test_index) = [];
end

function config = create_pipeline(calculator_file, ...
                                  descriptor_file, ...
                                  exemplars_db_file)
%CREATE_PIPELINE
  logger('Building a pipeline to train.');
  load(calculator_file, 'config');
  config{end-1}.input_labels = 'knn_predicted_labels';
  config{end}.database_file = exemplars_db_file;
  config = [config(1:end-2), ...
    knn_retriever.create(...
      'DescriptorFile', descriptor_file, ...
      'DatabaseFile', exemplars_db_file ...
      ), ...
    config{end-1:end}, ...
    gradient_calculator.create(), ...
    exemplar_localizer2.create(...
      'DatabaseFile', exemplars_db_file ...
      ), ...
    combined_localizer.create(...
      'InputAnnotation', 'clothing_annotation', ...
      'InputAnnotationLabels', 'clothing_labels'...
      ), ...
    clothing_refiner2.create(...
      'InputLabels', 'combined_labels', ...
      'InputLocalization', 'combined_localization' ...
      ), ...
    inverse_warp_calculator.create(...
      'InputImage', {'refined_labeling'}, ...
      'Output', {'final_labeling'} ...
      ), ...
    field_extractor.create(...
      'Output', {...
        'id', ...
        'image', ...
        'pose', ...
        'refined_labels', ...
        'final_labeling'...
        } ...
    ) ...
    ];
end

function samples = convert_fashionista_annotation(samples)
%CONVERT_ANNOTATIONS Convert data format for training.
  logger('Converting fashionista data.');
  % Retrieve annotations.
  [samples.tagging] = deal([]);
  for i = 1:numel(samples)
    tagging = unique(samples(i).annotation.superpixel_labels);
    samples(i).tagging = samples(i).annotation.labels(tagging);
    [samples(i).original_clothing_labeling, samples(i).clothing_labels] = ...
      get_clothing_annotation(samples(i).annotation);
  end
  samples = rmfield(samples, 'annotation');

  % Warp annotations.
  logger('Warping fashionista annotations.');
  config = normal_pose_calculator.create(...
    'InputImage',  'original_clothing_labeling', ...
    'InputPose',   'pose', ...
    'OutputImage', 'clothing_annotation', ...
    'OutputPose',  'normal_pose' ...
    );
  samples = normal_pose_calculator.apply(config, ...
                                         samples, ...
                                        'NormalPoseImageFormat', 'png', ...
                                        'NormalPoseInterpolation', 'Nearest');
  samples = rmfield(samples, 'original_clothing_labeling');
  samples = rmfield(samples, 'normal_transform');
end

function [new_annotation, labels] = get_clothing_annotation(annotation)
%CONVERT_ANNOTATION Convert annotation format for training.
  superpixel_index = imdecode(annotation.superpixel_map);
  labeling = annotation.superpixel_labels(superpixel_index);
  new_annotation = imencode(uint8(labeling), 'png');
  labels = annotation.labels;
end