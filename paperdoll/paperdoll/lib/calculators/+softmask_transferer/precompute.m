function samples = precompute(config, samples, varargin)
%PRECOMPUTE Precompute segmentation and its label-feature pairs.
%
%   sample = softmask_transferer.precompute(config, sample)
%
  for i = 1:numel(samples)
    sample = feature_calculator.decode(samples(i), config.input);
    labels = sample.(config.exemplar_labels);
    [segmentation, segment_geometry, segment_bow] = ...
        compute_segment_feature(config, sample);
    segment_localization = compute_segment_localization(config, ...
                                                        sample, ...
                                                        segmentation, ...
                                                        size(segment_geometry, 1), ...
                                                        labels);
    % Save segmentation, and per-segment {geometry, bow, localization}.
    samples(i).(config.output_segmentation) = imencode(segmentation);
    samples(i).(config.output_segment_geometry) = segment_geometry;
    samples(i).(config.output_segment_bow) = segment_bow;
    samples(i).(config.output_segment_localization) = segment_localization;
  end
end

function localization = compute_segment_localization(config, ...
                                                     exemplar, ...
                                                     segmentation, ...
                                                     num_segments, ...
                                                     labels)
%COMPUTE_SEGMENT_LOCALIZATION Compute class likelihoods for each segment.
  exemplar_localization = exemplar.(config.exemplar_localization);
  exemplar_labels = exemplar.(config.exemplar_labels);
  image_size = size(exemplar_localization);
  exemplar_localization = reshape(exemplar_localization, ...  
                                  prod(image_size(1:2)), ...
                                  image_size(3));
  % Result is an array of num_segments by num_labels.
  localization = zeros(num_segments, numel(labels), 'single');
  for i = 1:numel(exemplar_labels)
    label_index = strcmp(exemplar_labels{i}, labels);
    localization(:, label_index) = accumarray(...
      [segmentation(:), ones(numel(segmentation), 1)],...
      exemplar_localization(:, i),...
      [num_segments, 1],...
      @mean);
  end
end