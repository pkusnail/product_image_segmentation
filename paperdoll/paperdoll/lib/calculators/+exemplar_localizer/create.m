function config = create(varargin)
%CREATE Create a new calculator configuration.

  DEFAULT_DB_FILE = 'data/fashionista_v0.2_clothing_labelings.bdb';
  DEFAULT_FEATURE_CALCULATORS = feature_calculator.create(...
    'rgb_calculator', {'Input', 'normal_image'}, ...
    'lab_calculator', {'Input', 'rgb'}, ...
    'mr8_calculator', {'Input', 'rgb'}, ...
    'boundary_mask_calculator', {'InputImage', 'rgb'}, ...
    'gradient_calculator', {'Input', 'rgb'}, ...
    'pose_map_calculator', {...
      'InputImage', 'rgb', ...
      'InputPose', 'normal_pose' ...
    }...
    );

  config = struct( ...
    'name',                   'exemplar_localizer', ...
    'input_exemplar_ids',     'knn_retrieved_ids', ...
    'input_labels',           'knn_predicted_labels', ...
    'exemplar_labeling',      'refined_labeling', ...
    'exemplar_labels',        'clothing_labels', ...
    'output_localization',    'exemplar_localization', ...
    'output_labels',          'exemplar_labels', ...
    'database_file',          DEFAULT_DB_FILE, ...
    'local_pipeline',         {DEFAULT_FEATURE_CALCULATORS}, ...
    'features',               {{}}, ...
    'max_exemplars',          25 ...
  );

  for i = 1:2:numel(varargin)
    switch varargin{i}
      case 'InputExemplarIds',    config.input_exemplar_ids = varargin{i+1};
      case 'InputLabels',         config.input_labels = varargin{i+1};
      case 'DatabaseFile',        config.database_file = varargin{i+1};
      case 'FeatureCalculators',  config.local_pipeline = varargin{i+1};
      case 'OutputLabeling',      config.output_labeling = varargin{i+1};
      case 'OutputLabels',        config.output_labels = varargin{i+1};
    end
  end

  logger('Opened %s.', config.database_file);
  config.features = cellfun(@(x)strrep(x.name, '_calculator', ''), ...
                            config.local_pipeline, ...
                            'UniformOutput', false);
  % Append a template for the local pipeline.
  detector = clothing_detector.create(...
    'Input', config.features, ...
    'InputAnnotation', config.exemplar_labeling,...
    'Labels', {},...
    'Output', config.output_localization...
  );
  config.local_pipeline = [config.local_pipeline, detector];

end
